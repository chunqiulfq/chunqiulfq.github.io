<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUNQIULFQ</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chunqiublog.github.io/"/>
  <updated>2018-03-24T16:46:42.685Z</updated>
  <id>http://chunqiublog.github.io/</id>
  
  <author>
    <name>chunqiulfq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>etcd gateway</title>
    <link href="http://chunqiublog.github.io/2018-01-02-etcd-gateway.html"/>
    <id>http://chunqiublog.github.io/2018-01-02-etcd-gateway.html</id>
    <published>2018-01-02T11:36:48.000Z</published>
    <updated>2018-03-24T16:46:42.685Z</updated>
    
    <content type="html"><![CDATA[<p><em>翻译自: <a href="https://github.com/coreos/etcd/blob/c578ac4a1a87f90ccd13ae210ee920ff2753387f/Documentation/op-guide/gateway.md" target="_blank" rel="noopener">etcd gateway</a></em></p><h1 id="etcd-gateway-是什么"><a href="#etcd-gateway-是什么" class="headerlink" title="etcd gateway 是什么?"></a>etcd gateway 是什么?</h1><p>etcd gateway 是一个简单的转发网络数据到 etcd 集群的 TCP 代理. 这个 gateway 是无状态的, 透明的; 它既不检查客户端的请求, 也不干涉 etcd 集群的响应.<br>这个 gateway 支持多 etcd 服务端点, 遵循简单的循环策略连接端点. 它只路由到可用的端点, 且对连接到它上的客户端隐藏 etcd 服务端点的故障. 其他的重试策略(如加权循环)在将来可能会得到支持.</p><a id="more"></a><h1 id="什么时候使用-etcd-gateway"><a href="#什么时候使用-etcd-gateway" class="headerlink" title="什么时候使用 etcd gateway?"></a>什么时候使用 etcd gateway?</h1><p>每个访问 etcd 的应用必须首先拥有 etcd 集群的地址. 如果是同一台服务器上的多个应用访问同一个 etcd 集群, 每个应用仍然需要知道这个 etcd 集群公布的地址. 如果这个 etcd 集群重新配置为拥有不同端点的集群, 则每个应用程序可能还需要更新其端点列表. 这种大规模的重新配置既枯燥又容易出错.</p><p>etcd gateway 通过作为一个稳定的本地端点提供服务解决了这个问题. 一个典型的 etcd gateway 配置是让每一个机器运行一个监听本地端口的 gateway, 同时每一个 etcd 应用连接到这个本地 gateway. 这样在 etcd 集群重新配置时只有 gateway 需要更新它的端点配置, 而不是更新每一个应用.</p><p>总之, 为了自动传播 etcd 集群端点更改, etcd gateway 应该运行在为访问同一个 etcd 集群的多个应用程序提供服务的每台机器上.</p><h1 id="什么时候不应该使用-etcd-gateway"><a href="#什么时候不应该使用-etcd-gateway" class="headerlink" title="什么时候不应该使用 etcd gateway?"></a>什么时候不应该使用 etcd gateway?</h1><ul><li><p>提高性能<br>gateway 不是为了提高 etcd 集群性能而设置. 它不提供缓存, watch 的合并或批处理. etcd 团队正在开发一个旨在提高集群可扩展性的缓存代理.</p></li><li><p>在集群管理系统上运行<br>高级集群管理系统(如 Kubernetes) 本身支持服务发现, 应用程序可以使用有系统管理的 DNS 名称或虚拟 IP 地址访问 etcd 集群. 例如: kube-proxy等同于etcd网关.</p></li></ul><h1 id="启动-etcd-gateway"><a href="#启动-etcd-gateway" class="headerlink" title="启动 etcd gateway"></a>启动 etcd gateway</h1><p>考虑一个具有以下静态端点的 etcd 集群:</p><table><thead><tr><th>Name</th><th>Address</th><th>Hostname</th></tr></thead><tbody><tr><td>infra0</td><td>10.0.1.10</td><td>infra0.example.com</td></tr><tr><td>infra1</td><td>10.0.1.11</td><td>infra1.example.com</td></tr><tr><td>infra2</td><td>10.0.1.12</td><td>infra2.example.com</td></tr></tbody></table><p>使用包含这些静态端点的命令启动etcd gateway:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ etcd gateway start --endpoints=infra0.example.com,infra1.example.com,infra2.example.com</span><br><span class="line">2016-08-16 11:21:18.867350 I | tcpproxy: ready to proxy client requests to [...]</span><br></pre></td></tr></table></figure></p><p>或者, 如果使用 DNS 进行服务发现, 请考虑 DNS SRV 条目:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig +noall +answer SRV _etcd-client._tcp.example.com</span><br><span class="line">_etcd-client._tcp.example.com. 300 IN SRV 0 0 2379 infra0.example.com.</span><br><span class="line">_etcd-client._tcp.example.com. 300 IN SRV 0 0 2379 infra1.example.com.</span><br><span class="line">_etcd-client._tcp.example.com. 300 IN SRV 0 0 2379 infra2.example.com.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig +noall +answer infra0.example.com infra1.example.com infra2.example.com</span><br><span class="line">infra0.example.com.  300  IN  A  10.0.1.10</span><br><span class="line">infra1.example.com.  300  IN  A  10.0.1.11</span><br><span class="line">infra2.example.com.  300  IN  A  10.0.1.12</span><br></pre></td></tr></table></figure><p>使用以下命令从 DNS SRV 条目获取端点启动 etcd gateway:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ etcd gateway --discovery-srv=example.com</span><br><span class="line">2016-08-16 11:21:18.867350 I | tcpproxy: ready to proxy client requests to [...]</span><br></pre></td></tr></table></figure></p><h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><h2 id="etcd-集群"><a href="#etcd-集群" class="headerlink" title="etcd 集群"></a>etcd 集群</h2><h3 id="–endpoints"><a href="#–endpoints" class="headerlink" title="–endpoints"></a>–endpoints</h3><ul><li>逗号分隔的转发客户端连接的目标 etcd 集群列表</li><li>默认配置: <code>127.0.0.1:2379</code></li><li>无效示例: <code>https://127.0.0.1:2379</code>(gateway 不终止 TLS)</li></ul><h3 id="–discovery-srv"><a href="#–discovery-srv" class="headerlink" title="–discovery-srv"></a>–discovery-srv</h3><ul><li>通过 SRV 记录引导集群端点的 DNS 域名</li><li>默认配置: (不设置)</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="–listen-addr"><a href="#–listen-addr" class="headerlink" title="–listen-addr"></a>–listen-addr</h3><ul><li>接口和端口绑定接收客户端请求</li><li>默认: 127.0.0.1:23790</li></ul><h3 id="–retry-delay"><a href="#–retry-delay" class="headerlink" title="–retry-delay"></a>–retry-delay</h3><ul><li>重试连接到失败的端点之前的延迟时间</li><li>默认配置: 1m0s</li><li>无效示例: “123”(使用指定格式的时间单位)</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="–insecure-discovery"><a href="#–insecure-discovery" class="headerlink" title="–insecure-discovery"></a>–insecure-discovery</h3><ul><li>接收 SRV 记录是不安全或易受到中间人攻击的</li><li>默认配置: <code>false</code></li></ul><h3 id="–trusted-ca-file"><a href="#–trusted-ca-file" class="headerlink" title="–trusted-ca-file"></a>–trusted-ca-file</h3><ul><li>用于 etcd 集群的客户端 TLS CA 文件路径. 用于认证端点.</li><li>默认配置: (不设置)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;翻译自: &lt;a href=&quot;https://github.com/coreos/etcd/blob/c578ac4a1a87f90ccd13ae210ee920ff2753387f/Documentation/op-guide/gateway.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcd gateway&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;etcd-gateway-是什么&quot;&gt;&lt;a href=&quot;#etcd-gateway-是什么&quot; class=&quot;headerlink&quot; title=&quot;etcd gateway 是什么?&quot;&gt;&lt;/a&gt;etcd gateway 是什么?&lt;/h1&gt;&lt;p&gt;etcd gateway 是一个简单的转发网络数据到 etcd 集群的 TCP 代理. 这个 gateway 是无状态的, 透明的; 它既不检查客户端的请求, 也不干涉 etcd 集群的响应.&lt;br&gt;这个 gateway 支持多 etcd 服务端点, 遵循简单的循环策略连接端点. 它只路由到可用的端点, 且对连接到它上的客户端隐藏 etcd 服务端点的故障. 其他的重试策略(如加权循环)在将来可能会得到支持.&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="翻译" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="etcd" scheme="http://chunqiublog.github.io/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Redis 4.0源码解析: SDS(3)</title>
    <link href="http://chunqiublog.github.io/2017-12-14-Redis-4-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-SDS-3.html"/>
    <id>http://chunqiublog.github.io/2017-12-14-Redis-4-0源码解析-SDS-3.html</id>
    <published>2017-12-14T03:22:35.000Z</published>
    <updated>2017-12-14T18:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SDS-结构"><a href="#SDS-结构" class="headerlink" title="SDS 结构"></a>SDS 结构</h2><p>&emsp;&emsp;<code>SDS</code> 结构如下:<br><a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 类型为 3 lsb, string 长度为 5 msb. */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;               <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> alloc;             <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中:</p><ul><li><code>len</code> 表示 <code>sds</code> 字符串的长度</li><li><code>alloc</code> 表示 <code>SDS</code> 结构体剩余空间</li><li><code>flags</code> 表示 <code>SDS</code> 结构体类型</li><li><code>buf</code> 表示 <code>sds</code> 字符串<br>&emsp;&emsp;4.0 版本将 3.0 版本时期统一的结构根据 <code>SDS</code> 结构体可以存储字符串的长度划分为不同的 <strong>5</strong> 种类型, 节省了内存占用的空间, 但是加大字符串操作的复杂度, 在字符串长度变动时需要改变 <code>SDS</code> 结构体类型.</li></ul><h2 id="SDS-优势"><a href="#SDS-优势" class="headerlink" title="SDS 优势"></a>SDS 优势</h2><blockquote><ol><li>常数复杂度获取字符串长度</li><li>杜绝缓冲区溢出</li><li>减少修改字符串时带来的内存重分配次数</li><li>二进制安全</li><li>兼容部分 <code>C</code> 字符串函数</li></ol></blockquote><h2 id="SDS-内存分配策略"><a href="#SDS-内存分配策略" class="headerlink" title="SDS 内存分配策略"></a>SDS 内存分配策略</h2><ol><li>如果直接创建新结点, 会调用 <code>sdsnewlen</code> 函数根据指定字符串的长度创建一个新结点, 新结点没有空闲空间.</li><li>如果已有结点需要扩展空间时, 会调用 <code>sdsMakeRoomFor</code> 函数进行扩展.<br>a. 已有结点 <code>sds</code> 字符串空间 <code>&lt;</code> <code>SDS_MAX_PREALLOC</code>,  则对 <code>sds</code> 字符串空间扩展<strong>一倍</strong>.<br>b. 已有结点 <code>sds</code> 字符串空间 <code>&gt;=</code> <code>SDS_MAX_PREALLOC</code>(<code>1024 * 1024</code>),  则对 <code>sds</code> 字符串空间扩展 <code>SDS_MAX_PREALLOC</code>.</li><li><code>SDS</code> 会提供出一组接口使 <code>SDS</code> 的调用者需要释放或分配 <code>SDS</code> 相关的一些东西时可以使用. 同时将分配释放的宏封装起来可以在更换 <code>SDS</code> 分配器时不需要更改调用者中的分配器.</li></ol><h2 id="SDS-应用"><a href="#SDS-应用" class="headerlink" title="SDS 应用"></a>SDS 应用</h2><ul><li>保存数据库中的字符串值.</li><li>用作缓冲区(buffer)<ul><li>AOF 模块中的 AOF 缓冲区.</li><li>客户端状态中的输入缓冲区.</li></ul></li></ul><h2 id="SDS-源码的思考"><a href="#SDS-源码的思考" class="headerlink" title="SDS 源码的思考"></a>SDS 源码的思考</h2><ol><li>感觉没有必要使用 <code>SDS_HDR_VAR</code>, 会影响代码的可读性.</li><li>sdsnewlen 中为什么把 <code>len</code> 和 <code>alloc</code> 设置相同的字符串的长度?<br>len 表示字符串长度, <code>alloc</code> 表示字符串分配的空间, 这时分配空间是按照头结点长度 hdrlen + 字符串长度 <code>initlen</code> + <code>null</code> 终结符 1 进行计算, 分配给字符串的空间即为字符串长度, 所以这时的 <code>len</code> 等于 <code>alloc</code>.</li><li><code>sdsnewlen</code> 中为什么 <code>initlen</code> 为 0 时, 类型 5 不擅长?<br><em>(后续关注对 SDS 的调用)</em></li><li><code>sdsupdatelen</code> 是否已经弃用?<br><em>(后续关注对 SDS 的调用)</em></li><li><code>sdsRemoveFreeSpace</code> 的注释中 级联 是什么意思?<br><em>(后续关注对 SDS 的调用)</em></li><li><code>ssdsnew</code>, <code>sdsupdatelen</code>, <code>sdscat</code>, <code>sdscpy</code> 不是二进制安全, <code>sdscatrepr</code> -&gt; <code>sdscatprintf</code> -&gt; <code>sdscatvprintf</code> -&gt; <code>sdscat</code>, <code>sdsjoin</code> -&gt; <code>sdscat</code>, 二级制不安全. 注意 <code>sesdup</code> 调用的 <code>sdslen</code>, 二进制安全的. </li><li><code>zfree</code> 的时间复杂度是 O(N)? <code>sdsfree</code> 时间复杂度是 O(N)?<br><em>(后续关注对 SDS 的调用)</em></li><li><code>sdscatvprintf</code> 对于 <code>buf</code> 的处理为什么是将 -2 的位置置为 ‘\0’?<br>因为在 <code>vsnprintf(buf, buflen, fmt, cpy);</code> 函数中, 无论真正的格式化输出字符串的长度是否超过 <code>buflen</code>, <code>vsnprintf</code> 函数都会将 <code>buf[buflen - 1]</code> 置为 ‘\0’, 所以如果用 -1 位置判断就会出错, 只能用最后一个可以判断的字符即 -2  位置判断.</li><li><code>sdsfromlonglong</code> 真的比 <code>sdscatprintf</code> 快吗?<br><code>sdsfromlonglong</code> 调用 <code>sdsll2str</code> 进行转换, <code>sdscatprintf</code> -&gt; <code>sdscatvprintf</code> -&gt; <code>vsnprintf</code> 函数进行转换, 使用了可变参数. 猜测 <code>vsnprintf</code> 底层转换与 sdsll2str 相似. 在我自己的机器上实测了一下, <code>sdscatprintf</code> 会比 <code>sdsfromlonglong</code> 慢 1us.</li><li><code>sdscatrepr</code> 中 ‘\\‘, ‘“‘, 为什么不和其他字符一样使用 <code>sdscatlen</code>?<br>适用 <code>SDS</code> 中自带的测试集进行实测, 是可以实现的.</li><li><code>sdssplitargs</code> 如果处理类似 “ test\”aaa\” “ 会将参数识别为 test\”aaa\” 不影响吗?<br><em>(后续关注对 SDS 的调用)</em></li></ol><p><em>本文部分内容参考《Redis 设计与实现》一书.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SDS-结构&quot;&gt;&lt;a href=&quot;#SDS-结构&quot; class=&quot;headerlink&quot; title=&quot;SDS 结构&quot;&gt;&lt;/a&gt;SDS 结构&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;SDS&lt;/code&gt; 结构如下:&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="源码" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Redis" scheme="http://chunqiublog.github.io/tags/Redis/"/>
    
      <category term="SDS" scheme="http://chunqiublog.github.io/tags/SDS/"/>
    
  </entry>
  
  <entry>
    <title>Redis 4.0源码解析: SDS(2)</title>
    <link href="http://chunqiublog.github.io/2017-12-14-Redis-4-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-SDS-2.html"/>
    <id>http://chunqiublog.github.io/2017-12-14-Redis-4-0源码解析-SDS-2.html</id>
    <published>2017-12-14T03:22:31.000Z</published>
    <updated>2017-12-14T18:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文将介绍 <code>SDS</code> 的实现.<br><a id="more"></a></p><p><code>sds.c</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SDSLib 2.0, 一个 C 实现的 strings 库 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sds.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sdsalloc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取不同类型 sds 结构体大小</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sdsHdrSize</span><span class="params">(<span class="keyword">char</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(struct sdshdr5);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(struct sdshdr8);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(struct sdshdr16);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(struct sdshdr32);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(struct sdshdr64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 string 长度确定存储的 sds 类型</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">sdsReqType</span><span class="params">(<span class="keyword">size_t</span> string_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(string_size &lt; <span class="number">1</span> &lt;&lt; <span class="number">5</span>) <span class="comment">// 最大 31</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(string_size &lt; <span class="number">1</span> &lt;&lt; <span class="number">8</span>) <span class="comment">// 最大 255</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(string_size &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>) <span class="comment">// 最大 65535</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_16;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(LONG_MAX == LLONG_MAX)</span></span><br><span class="line">    <span class="keyword">if</span>(string_size &lt; <span class="number">1l</span>l &lt;&lt; <span class="number">32</span>) <span class="comment">//最大 2 ^ 32 - 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_32;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SDS_TYPE_64; <span class="comment">//最大 2 ^ 64 - 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制安全: 只会严格的按照二进制的数据存取. 不会妄图已某种特殊格式解析数据.</span></span><br><span class="line"><span class="comment">/* 使用 'init' 指针和 'initlen' 指定的内容创建一个新的 sds string.</span></span><br><span class="line"><span class="comment"> * 如果 'init' 是 NULL, 那么 string 将被初始化为 0 字节.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 字符串始终为空终止(\0)(所有的 sds 字符串都是, 都总是)</span></span><br><span class="line"><span class="comment"> * 因此即使你创建一个这样的 sds 字符串:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * mystring = sdsnewlen("abc", 3);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 你可以使用 printf() 打印字符串, 因为字符串的末尾有一个隐含的 \0.</span></span><br><span class="line"><span class="comment"> * 同时因为字符串长度保存在 sds 头结点中, 字符串是二进制安全的, \0也可以被包含在 sds 字符串中.</span></span><br><span class="line"><span class="comment"> * 也就是说 当 mystring = sdsnewlen("abc", 4); 时, \0 也是 sds 字符串中的一部分, 是二进制安全. */</span></span><br><span class="line"><span class="comment">// 根据给定的字符串 init 和字符串长度 initlen 创建一个新的 sds 并初始化</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, <span class="keyword">size_t</span> initlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *sh;</span><br><span class="line">    sds s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过长度获取存储字符串的 SDS 类型</span></span><br><span class="line">    <span class="keyword">char</span> type = sdsReqType(initlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为了添加字符串, 空字符串经常被创建.</span></span><br><span class="line"><span class="comment">     * 使用类型 8, 因为类型 5 在这里不适用. */</span></span><br><span class="line">    <span class="keyword">if</span>(type == SDS_TYPE_5 &amp;&amp; initlen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        type = SDS_TYPE_8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 SDS 类型获取 SDS 头结点大小</span></span><br><span class="line">    <span class="keyword">int</span> hdrlen = sdsHdrSize(type);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *fp; <span class="comment">/* 标记指针 */</span></span><br><span class="line"></span><br><span class="line">    sh = s_malloc(hdrlen + initlen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!init)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sh, <span class="number">0</span>, hdrlen + initlen + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sh == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s = (<span class="keyword">char</span> *)sh + hdrlen;</span><br><span class="line">    fp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)s) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 SDS 头结点</span></span><br><span class="line">    <span class="keyword">switch</span>(type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">        &#123;</span><br><span class="line">            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">8</span>, s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">16</span>, s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">32</span>, s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">64</span>, s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果指定初始化内容, 将它们复制到 sdshdr 的 buf 中</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span>(initlen &amp;&amp; init)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(s, init, initlen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串以 \0 结尾</span></span><br><span class="line">    s[initlen] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 buf 部分, 而不是整个 sdshdr</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建一个空(长度为 0) sds 字符串.</span></span><br><span class="line"><span class="comment"> * 在这种情况下字符串总是含有一个 null(\0) 终结符. */</span></span><br><span class="line"><span class="comment">// 创建并返回一个只保存了空字符串 "" 的 sds</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsempty</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(<span class="string">""</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据一个空终止(\0)的 C 字符串开始创建一个新的 sds 字符串. */</span></span><br><span class="line"><span class="comment">// 也只适合 C 字符串</span></span><br><span class="line"><span class="comment">// 根据给定字符串 init 创建一个包含同样字符串的 sds</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsnew</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> initlen = (init == <span class="literal">NULL</span>) ? <span class="number">0</span> : <span class="built_in">strlen</span>(init);</span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(init, initlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复制一个 sds 字符串 */</span></span><br><span class="line"><span class="comment">// 复制给定 sds 的副本</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsdup</span><span class="params">(<span class="keyword">const</span> sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(s, sdslen(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放 sds. 如果 s 为空, 则不需要干什么 */</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s_free((<span class="keyword">char</span> *)s - sdsHdrSize(s[<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置 sds 字符串长度为通过 strlen() 获取的长度, </span></span><br><span class="line"><span class="comment"> * 因此要考虑到内容只能到达第一个 null(\0) 字符.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 当 sds 字符串被黑客以某种手动方式入侵时, 这个函数是很有用的,</span></span><br><span class="line"><span class="comment"> * 如下例所示:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * s = sdsnew("foobar");</span></span><br><span class="line"><span class="comment"> * s[2] = '\0';</span></span><br><span class="line"><span class="comment"> * sdsupdatelen(s);</span></span><br><span class="line"><span class="comment"> * printf("%d\n", sdslen(s));</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输出将会是 2, 如果我们注释调用 sdsupdatelen() 的部分,</span></span><br><span class="line"><span class="comment"> * 输出将会是 6, 因为字符串被修改, 但是逻辑长度依然是 6. */</span></span><br><span class="line"><span class="comment">// 更新 sds 的长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsupdatelen</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reallen = <span class="built_in">strlen</span>(s);</span><br><span class="line">    sdssetlen(s, reallen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改一个字符串, 使它立刻变成空(长度为 0).</span></span><br><span class="line"><span class="comment"> * 但是所有现有的缓冲区不会被丢弃, 而是设置为可用空间,</span></span><br><span class="line"><span class="comment"> * 以便下一次增加操作不需要预先分配可用的字节数. */</span></span><br><span class="line"><span class="comment">// 清空 sds 字符串的内容</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sdssetlen(s, <span class="number">0</span>);</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在 sds 字符串的尾部扩增可用空间, 以便确保该函数的调用者在调用该函数后可以 sds 字符串末尾写入 addlen 个字节.</span></span><br><span class="line"><span class="comment"> * 再在末尾加上一个 null 终结符.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意: 注意这个函数不会改变 sdslen() 返回的 sds 字符串的 *length*, </span></span><br><span class="line"><span class="comment"> * 只能改变我们拥有的可用缓冲区空间. */</span></span><br><span class="line"><span class="comment">// 当 sds 字符串空间充足时, 直接返回, 空间不足时, 重新分配空间, 设置 sds 头结点, 字符串内容</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsMakeRoomFor</span><span class="params">(sds s, <span class="keyword">size_t</span> addlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *sh;</span><br><span class="line">    <span class="keyword">void</span> *newsh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前空闲空间大小</span></span><br><span class="line">    <span class="keyword">size_t</span> avail = sdsavail(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    <span class="keyword">size_t</span> newlen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> type;</span><br><span class="line">    <span class="comment">// 获取当前 sds 的类型</span></span><br><span class="line">    <span class="keyword">char</span> oldtype = s[<span class="number">-1</span>] &amp; SDS_TYPE_MASK;</span><br><span class="line">    <span class="keyword">int</span> hdrlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果空间足够, 立刻返回 */</span></span><br><span class="line">    <span class="keyword">if</span>(avail &gt;= addlen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = sdslen(s);</span><br><span class="line">    sh = (<span class="keyword">char</span> *)s - sdsHdrSize(oldtype);</span><br><span class="line">    newlen = (len + addlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要新分配给 sds 字符串的空间的长度小于 sds 最大预分配给 sds 字符串的空间长度</span></span><br><span class="line">    <span class="keyword">if</span>(newlen &lt; SDS_MAX_PREALLOC)</span><br><span class="line">    &#123;</span><br><span class="line">        newlen *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果需要新分配给 sds 字符串的空间的长度大于最大预分配给 sds 字符串的空间长度时, 每次增长最大预分配给 sds 字符串的空间长度</span></span><br><span class="line">        newlen += SDS_MAX_PREALLOC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据需要新分配给 sds 字符串的空间的长度计算新的 sds 需要的类型</span></span><br><span class="line">    type = sdsReqType(newlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 不要使用类型 5: 当用户扩增字符串时, 由于类型 5 不能记住空闲空间,</span></span><br><span class="line"><span class="comment">     * 因此调用 sdsMakeRoomFor() 时必须进行扩增操作 */</span></span><br><span class="line">    <span class="keyword">if</span>(type == SDS_TYPE_5)</span><br><span class="line">    &#123;</span><br><span class="line">        type = SDS_TYPE_8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hdrlen = sdsHdrSize(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldtype == type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果新类型与原来的类型相同, 重新分配新长度的 sds 并将原来 sds 字符串(包括头结点和 null 终结符)拷贝到新空间.</span></span><br><span class="line">        newsh = s_realloc(sh, hdrlen + newlen + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(newsh == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s = (<span class="keyword">char</span> *)newsh + hdrlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 由于头结点大小改变, 需要将字符串向前移动, 不能直接使用 realloc */</span></span><br><span class="line">        <span class="comment">// 如果新类型与原来的类型不同, 重新分配新类型新长度的 sds </span></span><br><span class="line">        newsh = s_malloc(hdrlen + newlen + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(newsh == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将原来的 sds 字符串拷贝到新 sds 中</span></span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)newsh + hdrlen, s, len + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 释放原来的 sds</span></span><br><span class="line">        s_free(sh);</span><br><span class="line">        s = (<span class="keyword">char</span> *)newsh + hdrlen;</span><br><span class="line">        <span class="comment">// 设置新 sds 类型, 长度</span></span><br><span class="line">        s[<span class="number">-1</span>] = type;</span><br><span class="line">        sdssetlen(s, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新分配空间大小</span></span><br><span class="line">    sdssetalloc(s, newlen);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为了使 sds 字符串结尾没有可用空间, 对其重新分配空间.</span></span><br><span class="line"><span class="comment"> * 剩下的 sds 字符串没有改变, 但是下一个级联操作将需要重新分配空间.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在被调用后, 通过这个函数的 sds 字符串不能变的更长, 所有的指针必须被调用返回的新指针替换 */</span></span><br><span class="line"><span class="comment">// 将 sds 字符串的空间缩短到字符串自身的长度.</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsRemoveFreeSpace</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *sh;</span><br><span class="line">    <span class="keyword">void</span> *newsh;</span><br><span class="line">    <span class="keyword">char</span> type;</span><br><span class="line">    <span class="keyword">char</span> oldtype = s[<span class="number">-1</span>] &amp; SDS_TYPE_MASK;</span><br><span class="line">    <span class="keyword">int</span> hdrlen;</span><br><span class="line">    <span class="keyword">size_t</span> len = sdslen(s);</span><br><span class="line">    sh = (<span class="keyword">char</span> *)s - sdsHdrSize(oldtype);</span><br><span class="line"></span><br><span class="line">    type = sdsReqType(len);</span><br><span class="line">    hdrlen = sdsHdrSize(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldtype == type)</span><br><span class="line">    &#123;</span><br><span class="line">        newsh = s_realloc(sh, hdrlen + len + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(newsh == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s = (<span class="keyword">char</span> *)newsh + hdrlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newsh = s_malloc(hdrlen + len + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(newsh == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)newsh + hdrlen, s, len + <span class="number">1</span>);</span><br><span class="line">        s_free(sh);</span><br><span class="line">        s = (<span class="keyword">char</span> *)newsh + hdrlen;</span><br><span class="line">        s[<span class="number">-1</span>] = type;</span><br><span class="line">        sdssetlen(s, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sdssetalloc(s, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回指定 sds 字符串分配总空间的大小</span></span><br><span class="line"><span class="comment"> * 包括:</span></span><br><span class="line"><span class="comment"> * 1) 指针前的 sds 头结点.</span></span><br><span class="line"><span class="comment"> * 2) 字符串.</span></span><br><span class="line"><span class="comment"> * 3) 结尾若干可用缓冲区.</span></span><br><span class="line"><span class="comment"> * 4) 隐含的 null 终结符.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 获取分配给 sds 的总空间</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="keyword">size_t</span> sdsAllocSize(sds s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span> alloc = sdsalloc(s);</span><br><span class="line">    <span class="keyword">return</span> sdsHdrSize(s[<span class="number">-1</span>]) + alloc + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回 sds 真实的分配总空间(通常, sds 字符串作为字符串缓冲区开始的参考) */</span></span><br><span class="line"><span class="comment">// 获取 sds 总空间的指针</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sdsAllocPtr</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)(s = sdsHdrSize(s[<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据 'incr' 增加 sds 字符串长度, 并减小字符串左侧可用空间.</span></span><br><span class="line"><span class="comment"> * 同时在新的字符串结尾设置 null 终结符.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用这个函数是为了在用户调用 sdsMakeRoomFor() 函数后, 在当前字符串的结尾写入一些东西,</span></span><br><span class="line"><span class="comment"> * 最后需要设置字符串新长度是修改字符串的长度.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意: 可以使用负增量来从右侧缩减字符串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 用法示例:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用以下模式调用 sdsIncrLen() 和 sdsMakeRoomFor(), 可以将字符串直接从内核挂载连接到</span></span><br><span class="line"><span class="comment"> * sds 字符串末尾, 不需要复制到中间缓冲区.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * oldlen = sdslen(s);</span></span><br><span class="line"><span class="comment"> * s = sdsMakeRoomFor(s, BUFFER_SIZE);</span></span><br><span class="line"><span class="comment"> * nread = read(fd, s + oldlen, BUFFER_SIZE);</span></span><br><span class="line"><span class="comment"> * ... 检查 nread &lt;= 0 并处理它 ...</span></span><br><span class="line"><span class="comment"> * sdsIncrLen(s, nread);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 修改 sds 字符串长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsIncrLen</span><span class="params">(sds s, <span class="keyword">int</span> incr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 sds 字符串长度</span></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *fp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)s) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> oldlen = SDS_TYPE_5_LEN(flags);</span><br><span class="line">            assert((incr &gt; <span class="number">0</span> &amp;&amp; oldlen + incr &lt; <span class="number">32</span>) || (incr &lt; <span class="number">0</span> &amp;&amp; oldlen &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(-incr)));</span><br><span class="line">            *fp = SDS_TYPE_5 | ((oldlen + incr) &lt;&lt; SDS_TYPE_BITS);</span><br><span class="line">            len = oldlen + incr;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">8</span>, s);</span><br><span class="line">            assert((incr &gt;= <span class="number">0</span> &amp;&amp; sh-&gt;alloc - sh-&gt;len &gt;= incr) || (incr &lt; <span class="number">0</span> &amp;&amp; sh-&gt;len &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(-incr)));</span><br><span class="line">            len = (sh-&gt;len +=incr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">16</span>, s);</span><br><span class="line">            assert((incr &gt;= <span class="number">0</span> &amp;&amp; sh-&gt;alloc - sh-&gt;len &gt;= incr) || (incr &lt; <span class="number">0</span> &amp;&amp; sh-&gt;len &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(-incr)));</span><br><span class="line">            len = (sh-&gt;len +=incr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">32</span>, s);</span><br><span class="line">            assert((incr &gt;= <span class="number">0</span> &amp;&amp; sh-&gt;alloc - sh-&gt;len &gt;= incr) || (incr &lt; <span class="number">0</span> &amp;&amp; sh-&gt;len &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(-incr)));</span><br><span class="line">            len = (sh-&gt;len +=incr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">64</span>, s);</span><br><span class="line">            assert((incr &gt;= <span class="number">0</span> &amp;&amp; sh-&gt;alloc - sh-&gt;len &gt;= incr) || (incr &lt; <span class="number">0</span> &amp;&amp; sh-&gt;len &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(-incr)));</span><br><span class="line">            len = (sh-&gt;len +=incr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            len = <span class="number">0</span>; <span class="comment">/* 只是为了避免编译警告 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    s[len] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将 sds 字符串的长度增长到指定长度. 增长的长度初始化为 0.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果指定的长度比当前 sds 字符串的短, 则不执行任何操作. */</span></span><br><span class="line"><span class="comment">// 增长字符串, 并将增加的部分置为 0</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsgrowzero</span><span class="params">(sds s, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> curlen = sdslen(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &lt;= curlen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩增 sds 字符串分配的空间</span></span><br><span class="line">    s = sdsMakeRoomFor(s, len - curlen);</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 确保添加的区域不包含垃圾 */</span></span><br><span class="line">    <span class="comment">// 将添加区域初始化为 0</span></span><br><span class="line">    <span class="built_in">memset</span>(s + curlen, <span class="number">0</span>, (len - curlen + <span class="number">1</span>));</span><br><span class="line">    sdssetlen(s, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在 sds 字符串 's' 后添加二进制安全的 len 个字节的 't' 字符串</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在调用后, 旧的 sds 字符串将不再有效, 所有指针必须用返回的新指针代替. */</span></span><br><span class="line"><span class="comment">// 在 sds 字符串后添加长度为 len 的字符串</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> curlen = sdslen(s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 空间足够直接返回, 空间不足获取空间</span></span><br><span class="line">    s = sdsMakeRoomFor(s, len);</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(s + curlen, t, len);</span><br><span class="line">    sdssetlen(s, curlen + len);</span><br><span class="line">    s[curlen + len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在 sds 字符串后添加指定以 null 终止的 C 字符串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在调用后, 旧的 sds 字符串将不再有效, 所有指针必须用返回的新指针代替. */</span></span><br><span class="line"><span class="comment">// 在 sds 字符串后添加指定以 null 终止的 C 字符串.</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在现有 sds 字符串后添加指定 sds 字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在调用后, 旧的 sds 字符串将不再有效, 所有指针必须用返回的新指针代替. */</span></span><br><span class="line"><span class="comment">// 在 sds 字符串后添加指定 sds 字符串.</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatsds</span><span class="params">(sds s, <span class="keyword">const</span> sds t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 破坏性的修改 sds 字符串来保存指定的长度为 'len' 字节的二进制安全的字符串 't'. */</span></span><br><span class="line"><span class="comment">// 拷贝二进制安全字符串 't' 到 sds 字符串中.</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscpylen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 查看字符串空间是否足够</span></span><br><span class="line">    <span class="keyword">if</span>(sdsalloc(s) &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        s = sdsMakeRoomFor(s, len - sdslen(s));</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(s, t, len);</span><br><span class="line">    s[len] = <span class="string">'\0'</span>;</span><br><span class="line">    sdssetlen(s, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似 sdscpylen() 但是 't' 必须是一个以 null 终结的字符串, 以便通过 strlen() 获取字符串长度. */</span></span><br><span class="line"><span class="comment">// 对 C 字符串进行拷贝</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscpy</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscpylen(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 帮助 sdscatlonglong() 进行实际的数字 -&gt; 字符串的转换.</span></span><br><span class="line"><span class="comment"> * 's' 必须指向一个最少 SDS_LLSTR_SIZE 字节的字符串空间.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个函数返回存储在 's' 中的以 null 终结的字符串表示的长度 */</span></span><br><span class="line"><span class="comment">// long long 类型转换为 string 类型</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_LLSTR_SIZE 21</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdsll2str</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">long</span> <span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">char</span> aux;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> v;</span><br><span class="line">    <span class="keyword">size_t</span> l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 生成字符串表示, 这种方式产生一个反转的字符串 */</span></span><br><span class="line">    <span class="comment">// 将 long long 反转存储在字符串中</span></span><br><span class="line">    v = (value &lt; <span class="number">0</span>) ? -value : value;</span><br><span class="line">    p = s;</span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 只能适用于 C 语言字符集</span></span><br><span class="line">        *p++ = <span class="string">'0'</span> + (v % <span class="number">10</span>);</span><br><span class="line">        v /= <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *p++ = <span class="string">'-'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算长度并添加 null 终止符 */</span></span><br><span class="line">    l = p - s;</span><br><span class="line">    *p = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 反转字符串 */</span></span><br><span class="line">    <span class="comment">// 将反转的字符串反转就是 long long 的顺序字符串表示</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    p --;</span><br><span class="line">    <span class="keyword">while</span>(s &lt; p)</span><br><span class="line">    &#123;</span><br><span class="line">        aux = *s;</span><br><span class="line">        *s = *p;</span><br><span class="line">        *p = aux;</span><br><span class="line">        s++;</span><br><span class="line">        p--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 与 sdsll2str() 相同, 但是这个函数是针对 unsigned long long 类型. */</span></span><br><span class="line"><span class="comment">// unsigned long long 类型转换为 string 类型</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdsull2str</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">char</span> aux;</span><br><span class="line">    <span class="keyword">size_t</span> l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 生成字符串表示, 这种方式产生一个反转的字符串 */</span></span><br><span class="line">    p = s;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        *p++ = <span class="string">'0'</span> + (v % <span class="number">10</span>);</span><br><span class="line">        v /= <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算长度并添加 null 终止符 */</span></span><br><span class="line">    l = p - s;</span><br><span class="line">    *p = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 反转字符串 */</span></span><br><span class="line">    p--;</span><br><span class="line">    <span class="keyword">while</span>(s &lt; p)</span><br><span class="line">    &#123;</span><br><span class="line">        aux = *s;</span><br><span class="line">        *s = *p;</span><br><span class="line">        *p = aux;</span><br><span class="line"></span><br><span class="line">        s++;</span><br><span class="line">        p--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据一个 long long 值创建一个 sds 字符串. 这要比以下方式快很多:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * sdscatprintf(sdsempty(), "%lld\n", value);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// long long 类型转换为 sds 类型</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsfromlonglong</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[SDS_LLSTR_SIZE];</span><br><span class="line">    <span class="keyword">int</span> len = sdsll2str(buf, value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(buf, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似 sdscatprintf() 但是获取的是 va_list 而不是可变参数 */</span></span><br><span class="line"><span class="comment">// 将 va_list 中的内容格式化输出添加到 sds 字符串空间中, 这里格式化输出 C 字符串</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatvprintf</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list cpy;</span><br><span class="line">    <span class="keyword">char</span> staticbuf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> *buf = staticbuf;</span><br><span class="line">    <span class="keyword">char</span> *t;</span><br><span class="line">    <span class="keyword">size_t</span> buflen = <span class="built_in">strlen</span>(fmt) * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 我们尝试开始使用静态缓冲区来提升速度.</span></span><br><span class="line"><span class="comment">     * 如果不可能, 我们回到使用堆分配. */</span></span><br><span class="line">    <span class="keyword">if</span>(buflen &gt; <span class="keyword">sizeof</span>(staticbuf))</span><br><span class="line">    &#123;</span><br><span class="line">        buf = s_malloc(buflen);</span><br><span class="line">        <span class="keyword">if</span>(buf == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        buflen = <span class="keyword">sizeof</span>(staticbuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 每次当我们使用当前缓冲区大小无法适应字符串时, 尝试使用缓冲区的两倍大小. */</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[buflen - <span class="number">2</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        va_copy(cpy, ap);</span><br><span class="line">        vsnprintf(buf, buflen, fmt, cpy);</span><br><span class="line">        va_end(cpy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf[buflen - <span class="number">2</span>] != <span class="string">'\0'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 缓冲区大小无法适应字符串.</span></span><br><span class="line">            <span class="keyword">if</span>(buf != staticbuf)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 在堆上分配的空间, 释放</span></span><br><span class="line">                s_free(buf);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重新分配两倍大小的空间</span></span><br><span class="line">            buflen *= <span class="number">2</span>;</span><br><span class="line">            buf = s_malloc(buflen);</span><br><span class="line">            <span class="keyword">if</span>(buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直到适应字符串</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最后将获得的字符串添加到 sds 字符串并返回它. */</span></span><br><span class="line">    <span class="comment">// 将字符串添加到 sds 字符串后</span></span><br><span class="line">    t = sdscat(s, buf);</span><br><span class="line">    <span class="keyword">if</span>(buf != staticbuf)</span><br><span class="line">    &#123;</span><br><span class="line">        s_free(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将使用类似 printf 指定格式获得的字符串添加到 sds 字符串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在被调用后, 被修改的 sds 字符串将不再有效, </span></span><br><span class="line"><span class="comment"> * 所有指针必须被调用返回的新指针替代.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * s = sdsnew("Sum is: ");</span></span><br><span class="line"><span class="comment"> * s = sdscatprintf(s, "%d+%d = %d", a, b, a + b);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通常, 你需要使用类似 printf 格式从头创建一个字符串.</span></span><br><span class="line"><span class="comment"> * 当你需要时, 只需要使用 sdsempty() 作为字符串:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * s = sdscatprintf(sdsempty(), "... your format ...", args);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将参数格式化输出添加到 sds 字符串中, 这里格式化输出 C 字符串</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatprintf</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">char</span> *t;</span><br><span class="line"></span><br><span class="line">    va_start(ap, fmt);</span><br><span class="line">    t = sdscatvprintf(s, fmt, ap);</span><br><span class="line">    va_end(ap);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这个函数类似 sdscatprintf, 但是要快很多, 它没有依靠 libc 中通常很慢的 sprintf() 系列函数.</span></span><br><span class="line"><span class="comment"> * 此外, 将 sds 字符串作为被连接新数据直接处理提供了性能改进.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 然而, 这个函数只处理类似 printf 的格式说明符的不兼容子集.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * %s - C 字符串</span></span><br><span class="line"><span class="comment"> * %S - SDS 字符串</span></span><br><span class="line"><span class="comment"> * %i - 有符号整形</span></span><br><span class="line"><span class="comment"> * %I - 64 位有符号整形(long long, int64_t)</span></span><br><span class="line"><span class="comment"> * %u - 无符号整形</span></span><br><span class="line"><span class="comment"> * %U - 64 位无符号整形(unsigned long long, uint64_t)</span></span><br><span class="line"><span class="comment"> * %% - % 字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将可变参数格式化输出添加到 sds 字符串中, 这里格式化输出为 sds 字符串</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatfmt</span><span class="params">(sds s, <span class="keyword">char</span> <span class="keyword">const</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> initlen = sdslen(s);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *f = fmt;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    va_list ap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始遍历参数</span></span><br><span class="line">    va_start(ap, fmt);</span><br><span class="line">    f = fmt;      <span class="comment">/* 遍历格式化输出字符串中格式说明符下一个要处理的字节. */</span></span><br><span class="line">    i = initlen;  <span class="comment">/* 写入目标字符串下一个字节的位置. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历格式化输出字符串</span></span><br><span class="line">    <span class="keyword">while</span>(*f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> next, *str;</span><br><span class="line">        <span class="keyword">size_t</span> l;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> num;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> unum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 确保至少有一个字节的空间 */</span></span><br><span class="line">        <span class="comment">// 确保当该字符不是说明符时有可以存储的 1 字节空间</span></span><br><span class="line">        <span class="keyword">if</span>(sdsavail(s) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = sdsMakeRoomFor(s, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理有可能为说明符的情况, 即 *f 为 %.</span></span><br><span class="line">        <span class="keyword">switch</span>(*f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">                next = *(f + <span class="number">1</span>);</span><br><span class="line">                f++;</span><br><span class="line">                <span class="keyword">switch</span>(next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">                        str = va_arg(ap, <span class="keyword">char</span> *);</span><br><span class="line">                        l = (next == <span class="string">'s'</span>) ? <span class="built_in">strlen</span>(str) : sdslen(str);</span><br><span class="line">                        <span class="comment">// 空间不足时扩容</span></span><br><span class="line">                        <span class="keyword">if</span>(sdsavail(s) &lt; l)</span><br><span class="line">                        &#123;</span><br><span class="line">                            s = sdsMakeRoomFor(s, l);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 将字符串添加到 sds 字符串后</span></span><br><span class="line">                        <span class="built_in">memcpy</span>(s + i, str, l);</span><br><span class="line">                        sdsinclen(s, l);</span><br><span class="line">                        i += l;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                        <span class="keyword">if</span>(next == <span class="string">'i'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            num = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            num = va_arg(ap, <span class="keyword">long</span> <span class="keyword">long</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 将 long long 转换为字符串</span></span><br><span class="line">                        <span class="keyword">char</span> buf[SDS_LLSTR_SIZE];</span><br><span class="line">                        l = sdsll2str(buf, num);</span><br><span class="line">                        <span class="keyword">if</span>(sdsavail(s) &lt; l)</span><br><span class="line">                        &#123;</span><br><span class="line">                            s = sdsMakeRoomFor(s, l);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">memcpy</span>(s + i, buf, l);</span><br><span class="line">                        sdsinclen(s, l);</span><br><span class="line">                        i += l;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">                        <span class="keyword">if</span>(next == <span class="string">'u'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            unum = va_arg(ap, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            unum = va_arg(ap, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">char</span> buf[SDS_LLSTR_SIZE];</span><br><span class="line">                        l = sdsull2str(buf, unum);</span><br><span class="line">                        <span class="keyword">if</span>(sdsavail(s) &lt; l)</span><br><span class="line">                        &#123;</span><br><span class="line">                            s = sdsMakeRoomFor(s, l);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">memcpy</span>(s + i, buf, l);</span><br><span class="line">                        sdsinclen(s, l);</span><br><span class="line">                        i += l;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: <span class="comment">/* 处理 %%, 通常为 %&lt;unknown&gt;. */</span></span><br><span class="line">                        s[i++] = next;</span><br><span class="line">                        sdsinclen(s, <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 处理不是 % 开头的可能为说明符的情况</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                s[i++] = *f;</span><br><span class="line">                sdsinclen(s, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f++;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(ap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加 null 终结符 */</span></span><br><span class="line">    s[i] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从字符串左边和右边分别删除 sds 字符串的一部分, 删除的字符串为在 'cset' 中找到的字符组成的连续字符,</span></span><br><span class="line"><span class="comment"> * 'cset' 字符串是一个 null 终结的 C 字符串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在调用这个函数后, 被修改 sds 字符串不再有效,</span></span><br><span class="line"><span class="comment"> * 所有指针必须被调用返回的新指针替代.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * s = sdsnew("AA...AA.a.aa.aHellWorld    :::");</span></span><br><span class="line"><span class="comment"> * s = sdstrim(s, "Aa. :");</span></span><br><span class="line"><span class="comment"> * printf("%s\n", s);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只输出 "Hello World"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 删除 sds 字符串首尾在 'cset' 中存在的字符串</span></span><br><span class="line"><span class="comment">// T = O(M*N)，M 为 SDS 长度, N 为 cset 长度</span></span><br><span class="line"><span class="function">sds <span class="title">sdstrim</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *cset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *start;</span><br><span class="line">    <span class="keyword">char</span> *end;</span><br><span class="line">    <span class="keyword">char</span> *sp;</span><br><span class="line">    <span class="keyword">char</span> *ep;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line"></span><br><span class="line">    sp = start = s;</span><br><span class="line">    ep = end = s + sdslen(s) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从头向尾遍历</span></span><br><span class="line">    <span class="comment">// T = O(M * N)</span></span><br><span class="line">    <span class="keyword">while</span>(sp &lt;= end &amp;&amp; <span class="built_in">strchr</span>(cset, *sp))</span><br><span class="line">    &#123;</span><br><span class="line">        sp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从尾向头遍历</span></span><br><span class="line">    <span class="keyword">while</span>(ep &gt; sp &amp;&amp; <span class="built_in">strchr</span>(cset, *ep))</span><br><span class="line">    &#123;</span><br><span class="line">        ep--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = (sp &gt; ep) ? <span class="number">0</span> : ((ep - sp) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动剩余部分</span></span><br><span class="line">    <span class="keyword">if</span>(s != sp)</span><br><span class="line">    &#123;</span><br><span class="line">        memmove(s, sp, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s[len] = <span class="string">'\0'</span>;</span><br><span class="line">    sdssetlen(s, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将字符串转换为一个较小(或相等)的, 仅包含由 'start' 到 'end' 索引指定的子串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * start 和 end 可以是负数, 其中 -1 表示字符串的最后一个字符, -2 表示倒数第二个字符, 等等.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 间隔是包含的, 因此开始和结束字符是生成字符串的一部分. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 字符串就地被修改.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * s = sdsnew("Hello World");</span></span><br><span class="line"><span class="comment"> * sdsrange(s, 1, -1); // =&gt; "ello World"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将 sds 字符串缩短为 'start' 到 'end' 之间, 闭区间</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsrange</span><span class="params">(sds s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> newlen;</span><br><span class="line">    <span class="keyword">size_t</span> len = sdslen(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果指定 'start' 是负数</span></span><br><span class="line">    <span class="keyword">if</span>(start &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        start = len + start;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 赋值负数超出字符串范围的 start 为 0</span></span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(end &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        end = len + end;</span><br><span class="line">        <span class="keyword">if</span>(end &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            end = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 start 和 end 指定子串的长度, 包含 start 和 end</span></span><br><span class="line">    newlen = (start &gt; end) ? <span class="number">0</span> : (end - start) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newlen != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= (<span class="keyword">signed</span>)len)</span><br><span class="line">        &#123;</span><br><span class="line">            newlen = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(end &gt;= (<span class="keyword">signed</span>)len)</span><br><span class="line">        &#123;</span><br><span class="line">            end = len - <span class="number">1</span>;</span><br><span class="line">            newlen = (start &gt; end) ? <span class="number">0</span> : (end - start) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这里 newlen = 0, 一定进入下一个 if</span></span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清楚 start 前的字符</span></span><br><span class="line">    <span class="keyword">if</span>(start &amp;&amp; newlen)</span><br><span class="line">    &#123;</span><br><span class="line">        memmove(s, s + start, newlen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// newlen 为 0 时, 清空字符串.</span></span><br><span class="line">    <span class="comment">// 即为 s[newlen] = '\0';</span></span><br><span class="line">    s[newlen] = <span class="number">0</span>;</span><br><span class="line">    sdssetlen(s, newlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对 sds 字符串 's' 的每一个字符调用 tolower() */</span></span><br><span class="line"><span class="comment">// 将 sds 字符串 's' 中的字母转换为小写字母</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstolower</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = sdslen(s);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换每一个字符</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[j] = <span class="built_in">tolower</span>(s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对 sds 字符串 's' 的每一个字符调用 sdstoupper() */</span></span><br><span class="line"><span class="comment">// 将 sds 字符串 's' 中的字母转换为大写字母</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstoupper</span><span class="params">(sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = sdslen(s);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[j] = <span class="built_in">toupper</span>(s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 memcmp() 比较两个 sds 字符串 s1 和 s2.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     如果 s1 &gt; s2, 返回正数.</span></span><br><span class="line"><span class="comment"> *     如果 s1 &lt; s2, 返回负数.</span></span><br><span class="line"><span class="comment"> *     如果s1和s2是完全相同的二进制字符, 则为0.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果两个字符串共享完全相同的前缀, 但是其中的一个长度更长, 则较长的字符串被认为大于较小的字符串. */</span></span><br><span class="line"><span class="comment">// 比较两个字符串</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdscmp</span><span class="params">(<span class="keyword">const</span> sds s1, <span class="keyword">const</span> sds s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> l1;</span><br><span class="line">    <span class="keyword">size_t</span> l2;</span><br><span class="line">    <span class="keyword">size_t</span> minlen;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line"></span><br><span class="line">    l1 = sdslen(s1);</span><br><span class="line">    l2 = sdslen(s2);</span><br><span class="line">    <span class="comment">// 获取最小长度</span></span><br><span class="line">    minlen = (l1 &lt; l2) ? l1 : l2;</span><br><span class="line">    <span class="comment">// 比较最小长度空间中的字符</span></span><br><span class="line">    cmp = <span class="built_in">memcmp</span>(s1, s2, minlen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cmp == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 最小长度空间中字符相同, 返回长度的差值, 为 0 则两个字符串相同</span></span><br><span class="line">        <span class="keyword">return</span> l1 - l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最小长度空间中不同字符的差</span></span><br><span class="line">    <span class="keyword">return</span> cmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用分隔符 'sep' 分割 's'. 返回 sds 字符串数组.</span></span><br><span class="line"><span class="comment"> * *count 将会被指针设置为 sds 的数量.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 内存溢出, 空字符串, 空分隔符将会返回 NULL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意: 'sep' 可以是一个由多个字符组成的分隔符. 例如:</span></span><br><span class="line"><span class="comment"> * sdssplit("foo_-_bar", "_-_");</span></span><br><span class="line"><span class="comment"> * 将返回 "foo" 和 "bar" 两个元素.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个函数的版本是二级制安全的, 但是需要参数长度.</span></span><br><span class="line"><span class="comment"> * sdssplit() 是只针对 NULL 终结的字符串的相同函数.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 分割 's' 保存在 sds 数组中, 二进制安全, 不可以以分隔符结尾</span></span><br><span class="line"><span class="comment">// T = O(N ^ 2)</span></span><br><span class="line"><span class="function">sds *<span class="title">sdssplitlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, <span class="keyword">const</span> <span class="keyword">char</span> *sep, <span class="keyword">int</span> seplen, <span class="keyword">int</span> *count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> elements = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slots = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    sds *tokens;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(seplen &lt; <span class="number">1</span> || len &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tokens = s_malloc(<span class="keyword">sizeof</span>(sds) * slots);</span><br><span class="line">    <span class="keyword">if</span>(tokens == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历字符串</span></span><br><span class="line">    <span class="comment">// T = O(N ^ 2)</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; (len - (seplen - <span class="number">1</span>)), j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 确保下一个元素和最后一个元素有空间 */</span></span><br><span class="line">        <span class="keyword">if</span>(slots &lt; elements + <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sds *newtokens;</span><br><span class="line">            slots *= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            newtokens = s_realloc(tokens, <span class="keyword">sizeof</span>(sds) * slots);</span><br><span class="line">            <span class="keyword">if</span>(newtokens == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">goto</span> cleanup;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tokens = newtokens;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 搜索分隔符 */</span></span><br><span class="line">        <span class="comment">// T = O(N)</span></span><br><span class="line">        <span class="keyword">if</span>((seplen == <span class="number">1</span> &amp;&amp; *(s + j) == sep[<span class="number">0</span>]) || (<span class="built_in">memcmp</span>(s + j, sep, seplen) == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 找到分隔符</span></span><br><span class="line">            tokens[elements] = sdsnewlen(s + start, j - start);</span><br><span class="line">            <span class="keyword">if</span>(tokens[elements] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">goto</span> cleanup;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            elements++;</span><br><span class="line">            start = j + seplen;</span><br><span class="line">            <span class="comment">// 麻蛋, -1 是因为 for 循环自己加了 1</span></span><br><span class="line">            j = j + seplen - <span class="number">1</span>; <span class="comment">/* 跳过分隔符 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 添加最后一个元素. 我们确定在标记数组中存在空间. */</span></span><br><span class="line">    tokens[elements] = sdsnewlen(s + start, len - start);</span><br><span class="line">    <span class="keyword">if</span>(tokens[elements] == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elements++;</span><br><span class="line">    *count = elements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tokens;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    cleanup:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="comment">// 清理空间</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; elements; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sdsfree(tokens[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        s_free(tokens);</span><br><span class="line">        *count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放 sdssplitlen() 返回的结果, 或者当 'tokens' 为 NULL 时什么都不做. */</span></span><br><span class="line"><span class="comment">// 释放分割的结果</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfreesplitres</span><span class="params">(sds *tokens, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tokens)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count--)</span><br><span class="line">    &#123;</span><br><span class="line">        sdsfree(tokens[count]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s_free(tokens);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为 sds 字符串 's' 添加将所有无法打印的字符(使用 isprint() 测试)</span></span><br><span class="line"><span class="comment"> * 变成 "\n\r\a..." 或 "\x&lt;hex-number&gt;" 转移的形式组成的转义字符串的表示.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在被调用后, 被修改的 sds 字符串将不再有效, </span></span><br><span class="line"><span class="comment"> * 所有指针必须被调用返回的新指针替代. */</span></span><br><span class="line"><span class="comment">// 将源字符串所有无法打印的字符转换为转义字符添加到 sds 字符串中, 转义后的字符串在 sds 字符串中被 '"' 包裹.</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatrepr</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *p, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s = sdscatlen(s, <span class="string">"\""</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(*p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\\'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                s = sdscatprintf(s, <span class="string">"\\%c"</span>, *p);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// case '\\': s = sdscatlen(s, "\\\\", 2); break;</span></span><br><span class="line">            <span class="comment">// case '"': s = sdscatlen(s, "\\\"", 2); break;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\n'</span>: s = sdscatlen(s, <span class="string">"\\n"</span>, <span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\r'</span>: s = sdscatlen(s, <span class="string">"\\r"</span>, <span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\t'</span>: s = sdscatlen(s, <span class="string">"\\t"</span>, <span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\a'</span>: s = sdscatlen(s, <span class="string">"\\a"</span>, <span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\b'</span>: s = sdscatlen(s, <span class="string">"\\b"</span>, <span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isprint</span>(*p))</span><br><span class="line">                &#123;</span><br><span class="line">                    s = sdscatprintf(s, <span class="string">"%c"</span>, *p);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    s = sdscatprintf(s, <span class="string">"\\x%02x"</span>, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) *p);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, <span class="string">"\""</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* sdssplitargs() 的辅助函数, 如果 'c' 是有效的十六进制, 则返回非零. */</span></span><br><span class="line"><span class="comment">// 测试字符是否为十六进制字符</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_hex_digit</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span>) || (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'f'</span>) || (c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'F'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* sdssplitargs() 的辅助函数, 将十六进制数转换为从 0 到 15 的整数. */</span></span><br><span class="line"><span class="comment">// 将十六进制转换为从 0 到 15 的整数.</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hex_digit_to_int</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'3'</span>: <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'4'</span>: <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'5'</span>: <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'6'</span>: <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'7'</span>: <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'8'</span>: <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'9'</span>: <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>: <span class="keyword">case</span> <span class="string">'A'</span>: <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'b'</span>: <span class="keyword">case</span> <span class="string">'B'</span>: <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>: <span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>: <span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>: <span class="keyword">case</span> <span class="string">'E'</span>: <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'f'</span>: <span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把一行文本切割成多个参数, 每个参数可以有以下的类编程语言 REPL 格式:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * foo bar "newline are suported\n" and "\xff\x00otherstuff"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数的数量存储在 *argc 中, 这个函数会返回一个 sds 数组.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 调用者应该调用 sdsfreesplitres() 函数释放生成的 sds 数组.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意: sdscatrepr() 可以将一个字符串转换为一个带引号的字符串,</span></span><br><span class="line"><span class="comment"> * 相同格式的字符串可以被 sdssplitargs() 函数解析.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 即使当输入出现空字符串, 函数仍然会将成功处理的字符串返回.</span></span><br><span class="line"><span class="comment"> * 或当输入不对应的引号或后引号后面没有跟空格例如: "foo"bar 或 "foo' 时返回 NULL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// * 这个函数主要用于 config.c 中对配置文件进行分析, 将字符串按照 REPL 格式切分成一个 sds 参数数组.</span></span><br><span class="line"><span class="comment">// * </span></span><br><span class="line"><span class="comment">// * 例如:</span></span><br><span class="line"><span class="comment">// *     sds *arr = sdssplitargs("timeout 10086\r\nport 123321\r\n");</span></span><br><span class="line"><span class="comment">// * 会得出:</span></span><br><span class="line"><span class="comment">// *     arr[0] = "timeout"</span></span><br><span class="line"><span class="comment">// *     arr[1] = "10086"</span></span><br><span class="line"><span class="comment">// *     arr[2] = "port"</span></span><br><span class="line"><span class="comment">// *     arr[3] = "123321"</span></span><br><span class="line"><span class="comment">// * T = O(N)</span></span><br><span class="line"><span class="function">sds *<span class="title">sdssplitargs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *line, <span class="keyword">int</span> *argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = line;</span><br><span class="line">    <span class="keyword">char</span> *current = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> **<span class="built_in">vector</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    *argc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遇到空格跳过</span></span><br><span class="line">        <span class="comment">// T = O(N)</span></span><br><span class="line">        <span class="keyword">while</span>(*p &amp;&amp; <span class="built_in">isspace</span>(*p))</span><br><span class="line">        &#123;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(*p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 获取一个标记 */</span></span><br><span class="line">            <span class="keyword">int</span> inq = <span class="number">0</span>;  <span class="comment">/* 如果遇到引号设置为 1 */</span></span><br><span class="line">            <span class="keyword">int</span> insq = <span class="number">0</span>; <span class="comment">/* 如果遇到单引号设置为 1 */</span></span><br><span class="line">            <span class="comment">// 当前参数结束了设置为 1</span></span><br><span class="line">            <span class="keyword">int</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取一个 sds 存储参数</span></span><br><span class="line">            <span class="keyword">if</span>(current == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                current = sdsempty();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// T = O(N)</span></span><br><span class="line">            <span class="keyword">while</span>(!done)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(inq)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 前面遍历过前引号</span></span><br><span class="line">                    <span class="keyword">if</span>(*p == <span class="string">'\\'</span> &amp;&amp; *(p + <span class="number">1</span>) == <span class="string">'x'</span> </span><br><span class="line">                        &amp;&amp; is_hex_digit(*(p + <span class="number">2</span>)) &amp;&amp; is_hex_digit(*(p + <span class="number">3</span>)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 遇到十六进制表示, 转换为字符</span></span><br><span class="line">                        <span class="keyword">unsigned</span> <span class="keyword">char</span> byte;</span><br><span class="line"></span><br><span class="line">                        byte = (hex_digit_to_int(*(p + <span class="number">2</span>)) * <span class="number">16</span>) + hex_digit_to_int(*(p + <span class="number">3</span>));</span><br><span class="line">                        current = sdscatlen(current, (<span class="keyword">char</span> *)&amp;byte, <span class="number">1</span>);</span><br><span class="line">                        p += <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(*p == <span class="string">'\\'</span> &amp;&amp; *(p + <span class="number">1</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 遇到转义字符, 转换为对应的字符</span></span><br><span class="line">                        <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">                        p++;</span><br><span class="line">                        <span class="keyword">switch</span>(*p)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'n'</span>: c = <span class="string">'\n'</span>; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'r'</span>: c = <span class="string">'\r'</span>; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'t'</span>: c = <span class="string">'\t'</span>; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'b'</span>: c = <span class="string">'\b'</span>; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">'a'</span>: c = <span class="string">'\a'</span>; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>: c = *p; <span class="keyword">break</span>; </span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        current = sdscatlen(current, &amp;c, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(*p == <span class="string">'"'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/* 后引号后面必须紧跟空格或者在字符串结尾 */</span></span><br><span class="line">                        <span class="comment">// 遇到后引号, 检测后一个字符是否为空格或结束</span></span><br><span class="line">                        <span class="keyword">if</span>(*(p + <span class="number">1</span>) &amp;&amp; !<span class="built_in">isspace</span>(*(p + <span class="number">1</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 不是执行错误处理代码</span></span><br><span class="line">                            <span class="keyword">goto</span> err;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        done = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(!*p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/* 引号没有终止 */</span></span><br><span class="line">                        <span class="comment">// 没有后引号就结束</span></span><br><span class="line">                        <span class="keyword">goto</span> err;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 否则为普通字符</span></span><br><span class="line">                        current = sdscatlen(current, p, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(insq)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 前面遍历过前单引号</span></span><br><span class="line">                    <span class="keyword">if</span>(*p == <span class="string">'\\'</span> &amp;&amp; *(p + <span class="number">1</span>) == <span class="string">'\''</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 遇到转义的单引号</span></span><br><span class="line">                        p++;</span><br><span class="line">                        current = sdscatlen(current, <span class="string">"'"</span>, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(*p == <span class="string">'\''</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/* 后引号后面必须紧跟空格或者在字符串结尾 */</span></span><br><span class="line">                        <span class="comment">// 遇到后单引号, 检测后一个字符是否为空格或结束</span></span><br><span class="line">                        <span class="keyword">if</span>(*(p + <span class="number">1</span>) &amp;&amp; !<span class="built_in">isspace</span>(*(p + <span class="number">1</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">goto</span> err;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        done = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(!*p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/* 引号没有终止 */</span></span><br><span class="line">                        <span class="keyword">goto</span> err;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 否则为普通字符</span></span><br><span class="line">                        current = sdscatlen(current, p, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 不在引号内的字符</span></span><br><span class="line">                    <span class="keyword">switch</span>(*p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 分隔参数的符号</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\0'</span>:</span><br><span class="line">                            done = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// 前引号</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                            inq = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// 后引号</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">                            insq = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// 普通字符</span></span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            current = sdscatlen(current, p, <span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 指针向后移动</span></span><br><span class="line">                <span class="keyword">if</span>(*p)</span><br><span class="line">                &#123;</span><br><span class="line">                    p++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 在 vector 中添加标记 */</span></span><br><span class="line">            <span class="comment">// 将参数添加到参数数组 vector 中</span></span><br><span class="line">            <span class="comment">// T = O(N)</span></span><br><span class="line">            <span class="built_in">vector</span> = s_realloc(<span class="built_in">vector</span>, ((*argc) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">            <span class="built_in">vector</span>[*argc] = current;</span><br><span class="line">            (*argc)++;</span><br><span class="line">            current = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 即使是空字符串仍然返回一些内容, 不会返回 NULL */</span></span><br><span class="line">            <span class="comment">// 字符串遍历结束</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">vector</span> == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">vector</span> = s_malloc(<span class="keyword">sizeof</span>(<span class="keyword">void</span> *));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 出错时, 清理内存空间, 返回 NULL</span></span><br><span class="line">        <span class="keyword">while</span>((*argc)--)</span><br><span class="line">        &#123;</span><br><span class="line">            sdsfree(<span class="built_in">vector</span>[*argc]);</span><br><span class="line">        &#125;</span><br><span class="line">        s_free(<span class="built_in">vector</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(current)</span><br><span class="line">        &#123;</span><br><span class="line">            sdsfree(current);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *argc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将 sds 字符串中所有 'from' 字符串中指定的字符集出现的字符替换为 'to' 数组中相应位置的字符.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> * sdsmapchars(mystring, "ho", "01", 2);</span></span><br><span class="line"><span class="comment"> * 将具有将字符串 "hello" 转换为 "0ell1" 的效果.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个函数返回 sds 字符串指针, 它总是与输入指针大小相同, 因此不需要调整大小. */</span></span><br><span class="line"><span class="comment">// 将 sds 字符串中 'from' 中的字符替换为 'to' 中对应位置的字符</span></span><br><span class="line"><span class="comment">// T = O(M * N) M 为 setlen 的长度, N 为 s 的长度</span></span><br><span class="line"><span class="function">sds <span class="title">sdsmapchars</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to, <span class="keyword">size_t</span> setlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> j;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> l = sdslen(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; l; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; setlen; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j] == from[i])</span><br><span class="line">            &#123;</span><br><span class="line">                s[j] = to[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用指定分隔符(C 字符串)将一个 C 字符串数组组合成一个 sds 字符串.</span></span><br><span class="line"><span class="comment"> * 以 sds 字符串形式返回结果 */</span></span><br><span class="line"><span class="comment">// 将参数以 sep 为间隔连接成一个 sds 字符串, 二进制不安全</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsjoin</span><span class="params">(<span class="keyword">char</span> **argv, <span class="keyword">int</span> argc, <span class="keyword">char</span> *sep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sds join = sdsempty();</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; argc; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        join = sdscat(join, argv[j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j != argc - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            join = sdscat(join, sep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> join;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似 sdsjoin, 但是是将一个 sds 字符串数组组合成一个 sds 字符串. */</span></span><br><span class="line"><span class="comment">// T = O(N)</span></span><br><span class="line"><span class="function">sds <span class="title">sdsjoinsds</span><span class="params">(sds *argv, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *sep, <span class="keyword">size_t</span> seplen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sds join = sdsempty();</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; argc; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        join = sdscatsds(join, argv[j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j != argc - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            join = sdscatlen(join, sep, seplen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> join;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 低等级函数作为 API 暴露给用户使用 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 封装被 SDS 使用的分配器. </span></span><br><span class="line"><span class="comment"> * 注意: 为了避免函数调用过程的付出开销, SDS 实际上只使用 sdsalloc.h 中定义的宏.</span></span><br><span class="line"><span class="comment"> * 这里, 我们定义这些封装只有在当链接 SDS 的程序想要接触 SDS 构件的时候使用, 即使它们使用的是不同的分配器. */</span></span><br><span class="line"><span class="comment">// 在 SDS 的调用者需要释放或申请 SDS 相关的一些东西时可以使用这三个程序.</span></span><br><span class="line"><span class="comment">// 将分配释放的宏封装起来应该是为了在更换 SDS 分配器时不需要更改调用者中的分配器.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sds_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s_malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sds_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s_realloc(ptr, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sds_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_free(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(SDS_TEST_MAIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"testhelp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"limits.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNUSED(x) (void)(x)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdsTest</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        sds x = sdsnew(<span class="string">"foo"</span>), y;</span><br><span class="line"></span><br><span class="line">        test_cond(<span class="string">"Create a string and obtain the length"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">3</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"foo\0"</span>,<span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnewlen(<span class="string">"foo"</span>,<span class="number">2</span>);</span><br><span class="line">        test_cond(<span class="string">"Create a string with specified length"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">2</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"fo\0"</span>,<span class="number">3</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        x = sdscat(x,<span class="string">"bar"</span>);</span><br><span class="line">        test_cond(<span class="string">"Strings concatenation"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">5</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"fobar\0"</span>,<span class="number">6</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        x = sdscpy(x,<span class="string">"a"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscpy() against an originally longer string"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">1</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"a\0"</span>,<span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        x = sdscpy(x,<span class="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscpy() against an originally shorter string"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">33</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">memcmp</span>(x,<span class="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0"</span>,<span class="number">33</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdscatprintf(sdsempty(),<span class="string">"%d"</span>,<span class="number">123</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscatprintf() seems working in the base case"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">3</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"123\0"</span>,<span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"--"</span>);</span><br><span class="line">        x = sdscatfmt(x, <span class="string">"Hello %s World %I,%I--"</span>, <span class="string">"Hi!"</span>, LLONG_MIN,LLONG_MAX);</span><br><span class="line">        test_cond(<span class="string">"sdscatfmt() seems working in the base case"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">60</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">memcmp</span>(x,<span class="string">"--Hello Hi! World -9223372036854775808,"</span></span><br><span class="line">                     <span class="string">"9223372036854775807--"</span>,<span class="number">60</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%s]\n"</span>,x);</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"--"</span>);</span><br><span class="line">        x = sdscatfmt(x, <span class="string">"%u,%U--"</span>, UINT_MAX, ULLONG_MAX);</span><br><span class="line">        test_cond(<span class="string">"sdscatfmt() seems working with unsigned numbers"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">35</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">memcmp</span>(x,<span class="string">"--4294967295,18446744073709551615--"</span>,<span class="number">35</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">" x "</span>);</span><br><span class="line">        sdstrim(x,<span class="string">" x"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdstrim() works when all chars match"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">" x "</span>);</span><br><span class="line">        sdstrim(x,<span class="string">" "</span>);</span><br><span class="line">        test_cond(<span class="string">"sdstrim() works when a single char remains"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">1</span> &amp;&amp; x[<span class="number">0</span>] == <span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"xxciaoyyy"</span>);</span><br><span class="line">        sdstrim(x,<span class="string">"xy"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdstrim() correctly trims characters"</span>,</span><br><span class="line">            sdslen(x) == <span class="number">4</span> &amp;&amp; <span class="built_in">memcmp</span>(x,<span class="string">"ciao\0"</span>,<span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,1,1)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">1</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"i\0"</span>,<span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,1,-1)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">3</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"iao\0"</span>,<span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">-2</span>,<span class="number">-1</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,-2,-1)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">2</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"ao\0"</span>,<span class="number">3</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,2,1)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">0</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"\0"</span>,<span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,1,100)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">3</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"iao\0"</span>,<span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        y = sdsdup(x);</span><br><span class="line">        sdsrange(y,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        test_cond(<span class="string">"sdsrange(...,100,100)"</span>,</span><br><span class="line">            sdslen(y) == <span class="number">0</span> &amp;&amp; <span class="built_in">memcmp</span>(y,<span class="string">"\0"</span>,<span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"foo"</span>);</span><br><span class="line">        y = sdsnew(<span class="string">"foa"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscmp(foo,foa)"</span>, sdscmp(x,y) &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"bar"</span>);</span><br><span class="line">        y = sdsnew(<span class="string">"bar"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscmp(bar,bar)"</span>, sdscmp(x,y) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnew(<span class="string">"aar"</span>);</span><br><span class="line">        y = sdsnew(<span class="string">"bar"</span>);</span><br><span class="line">        test_cond(<span class="string">"sdscmp(bar,bar)"</span>, sdscmp(x,y) &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sdsfree(y);</span><br><span class="line">        sdsfree(x);</span><br><span class="line">        x = sdsnewlen(<span class="string">"\a\n\0foo\r"</span>,<span class="number">7</span>);</span><br><span class="line">        y = sdscatrepr(sdsempty(),x,sdslen(x));</span><br><span class="line">        test_cond(<span class="string">"sdscatrepr(...data...)"</span>,</span><br><span class="line">            <span class="built_in">memcmp</span>(y,<span class="string">"\"\\a\\n\\x00foo\\r\""</span>,<span class="number">15</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> oldfree;</span><br><span class="line">            <span class="keyword">char</span> *p;</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">10</span>, j, i;</span><br><span class="line"></span><br><span class="line">            sdsfree(x);</span><br><span class="line">            sdsfree(y);</span><br><span class="line">            x = sdsnew(<span class="string">"0"</span>);</span><br><span class="line">            test_cond(<span class="string">"sdsnew() free/len buffers"</span>, sdslen(x) == <span class="number">1</span> &amp;&amp; sdsavail(x) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Run the test a few times in order to hit the first two</span></span><br><span class="line"><span class="comment">             * SDS header types. */</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> oldlen = sdslen(x);</span><br><span class="line">                x = sdsMakeRoomFor(x,step);</span><br><span class="line">                <span class="keyword">int</span> type = x[<span class="number">-1</span>]&amp;SDS_TYPE_MASK;</span><br><span class="line"></span><br><span class="line">                test_cond(<span class="string">"sdsMakeRoomFor() len"</span>, sdslen(x) == oldlen);</span><br><span class="line">                <span class="keyword">if</span> (type != SDS_TYPE_5) &#123;</span><br><span class="line">                    test_cond(<span class="string">"sdsMakeRoomFor() free"</span>, sdsavail(x) &gt;= step);</span><br><span class="line">                    oldfree = sdsavail(x);</span><br><span class="line">                &#125;</span><br><span class="line">                p = x+oldlen;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; step; j++) &#123;</span><br><span class="line">                    p[j] = <span class="string">'A'</span>+j;</span><br><span class="line">                &#125;</span><br><span class="line">                sdsIncrLen(x,step);</span><br><span class="line">            &#125;</span><br><span class="line">            test_cond(<span class="string">"sdsMakeRoomFor() content"</span>,</span><br><span class="line">                <span class="built_in">memcmp</span>(<span class="string">"0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ"</span>,x,<span class="number">101</span>) == <span class="number">0</span>);</span><br><span class="line">            test_cond(<span class="string">"sdsMakeRoomFor() final length"</span>,sdslen(x)==<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">            sdsfree(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test_report()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SDS_TEST_MAIN</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdsTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文将介绍 &lt;code&gt;SDS&lt;/code&gt; 的实现.&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="源码" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Redis" scheme="http://chunqiublog.github.io/tags/Redis/"/>
    
      <category term="SDS" scheme="http://chunqiublog.github.io/tags/SDS/"/>
    
  </entry>
  
  <entry>
    <title>Redis 4.0源码解析: SDS(1)</title>
    <link href="http://chunqiublog.github.io/2017-12-14-Redis-4-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-SDS-1.html"/>
    <id>http://chunqiublog.github.io/2017-12-14-Redis-4-0源码解析-SDS-1.html</id>
    <published>2017-12-14T03:22:26.000Z</published>
    <updated>2017-12-14T18:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文将介绍 <code>SDS</code> 的头文件. <code>SDS</code> 的头文件包括两个文件: <code>sds.h</code> 和 <code>sdsalloc.h</code>.<br><a id="more"></a></p><p><code>sds.h</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SDSLib 2.0, 一个 C 实现的 strings 库 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SDS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SDS_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大预分配给 sds 字符串的空间长度(分配给 sds 字符串的空间最大增长长度)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_MAX_PREALLOC (1024 * 1024)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类别名, 用于指向 sdshdr 的 buf 属性</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lsb 最低有效位</span></span><br><span class="line"><span class="comment">/* 注意: sdshdr5 是永远不会被使用的, 它只是被我们用来直接获取 flags 标记字节.</span></span><br><span class="line"><span class="comment"> * 这里是记录 SDS strings类型 5 的布局. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 类型为 3 lsb, string 长度为 5 msb. */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;               <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> alloc;             <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> len;              <span class="comment">/* 被使用 */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> alloc;            <span class="comment">/* 不包括头结点和空字节符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;       <span class="comment">/* 类型为 3 lsb, 5 个没有使用的位 */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_5  0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_8  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_64 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_MASK 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_BITS 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 麻蛋, C 实现的多态... 吓尿了... </span></span><br><span class="line"><span class="comment">// 但是感觉在代码中突然冒出一个 sh 会影响程序的可读性.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_HDR_VAR(T, s)  struct sdshdr##T *sh = (void *)((s) - (sizeof(struct sdshdr##T)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_HDR(T, s)      ((struct sdshdr##T *)((s) - (sizeof(struct sdshdr##T))))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_5_LEN(f)  ((f) &gt;&gt; SDS_TYPE_BITS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 sds 实际保存的字符串的长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdslen</span><span class="params">(<span class="keyword">const</span> sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> SDS_TYPE_5_LEN(flags);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">8</span>, s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">16</span>, s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">32</span>, s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">64</span>, s)-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 sds 分配给 sds 字符串的空间的长度与保存的字符串长度之差, 即空闲空间</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdsavail</span><span class="params">(<span class="keyword">const</span> sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">8</span>, s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">16</span>, s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">32</span>, s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">        &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">64</span>, s);</span><br><span class="line">            <span class="keyword">return</span> sh-&gt;alloc - sh-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 sds 实际保存的字符串长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sdssetlen</span><span class="params">(sds s, <span class="keyword">size_t</span> newlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> *fp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)s) - <span class="number">1</span>;</span><br><span class="line">                *fp = SDS_TYPE_5 | (newlen &lt;&lt; SDS_TYPE_BITS); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>, s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>, s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>, s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>, s)-&gt;len = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 sds 实际保存字符串增加的长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sdsinclen</span><span class="params">(sds s, <span class="keyword">size_t</span> inc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> *fp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)s) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> newlen = SDS_TYPE_5_LEN(flags) + inc;</span><br><span class="line">                *fp = SDS_TYPE_5 | (newlen &lt;&lt; SDS_TYPE_BITS); <span class="comment">//=============================感觉没有必要呀</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>, s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>, s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>, s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>, s)-&gt;len += inc;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* sdsalloc() = sdsavail() + sdslen() */</span></span><br><span class="line"><span class="comment">// 获取 sds 分配给 sds 字符串的空间的长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdsalloc</span><span class="params">(<span class="keyword">const</span> sds s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> SDS_TYPE_5_LEN(flags);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">8</span>, s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">16</span>, s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">32</span>, s)-&gt;alloc;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">64</span>, s)-&gt;alloc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置分配给 sds 字符串的空间长度</span></span><br><span class="line"><span class="comment">// T = O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sdssetalloc</span><span class="params">(<span class="keyword">const</span> sds s, <span class="keyword">size_t</span> newlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(flags &amp; SDS_TYPE_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="comment">/* 不需要做什么事, 这个类型没有分配给 sds 字符串的空间信息 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            SDS_HDR(<span class="number">8</span>, s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            SDS_HDR(<span class="number">16</span>, s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            SDS_HDR(<span class="number">32</span>, s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            SDS_HDR(<span class="number">64</span>, s)-&gt;alloc = newlen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, <span class="keyword">size_t</span> initlen)</span></span>; <span class="comment">// 根据给定的字符串 init 和字符串长度 initlen 创建一个新的 sds 并初始化</span></span><br><span class="line"><span class="function">sds <span class="title">sdsnew</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init)</span></span>;                    <span class="comment">// 根据给定字符串 init 创建一个包含同样字符串的 sds</span></span><br><span class="line"><span class="function">sds <span class="title">sdsempty</span><span class="params">(<span class="keyword">void</span>)</span></span>;                              <span class="comment">// 创建并返回一个只保存了空字符串 "" 的 sds</span></span><br><span class="line"><span class="function">sds <span class="title">sdsdup</span><span class="params">(<span class="keyword">const</span> sds s)</span></span>;                         <span class="comment">// 复制给定 sds 的副本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span></span>;                             <span class="comment">// 释放 sds. 如果 s 为空, 则不需要干什么</span></span><br><span class="line"><span class="function">sds <span class="title">sdsgrowzero</span><span class="params">(sds s, <span class="keyword">size_t</span> len)</span></span>;              <span class="comment">// 增长字符串, 并将增加的部分置为 0</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, <span class="keyword">size_t</span> len)</span></span>; <span class="comment">// 在 sds 字符串后添加长度为 len 的字符串</span></span><br><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span></span>;                <span class="comment">// 在 sds 字符串后添加指定以 null 终止的 C 字符串.</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatsds</span><span class="params">(sds s, <span class="keyword">const</span> sds t)</span></span>;               <span class="comment">// 在 sds 字符串后添加指定 sds 字符串.</span></span><br><span class="line"><span class="function">sds <span class="title">sdscpylen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t, <span class="keyword">size_t</span> len)</span></span>; <span class="comment">// 拷贝二进制安全字符串 't' 到 sds 字符串中.</span></span><br><span class="line"><span class="function">sds <span class="title">sdscpy</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span></span>;                <span class="comment">// 对 C 字符串进行拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatvprintf</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list ap)</span></span>; <span class="comment">// 将 va_list 中的内容格式化输出添加到 sds 字符串空间中, 这里格式化输出 C 字符串</span></span><br><span class="line"><span class="comment">// 将参数格式化输出添加到 sds 字符串中, 这里格式化输出 C 字符串</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __GNUC__</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatprintf</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line">    __attribute__((format(printf, 2, 3)));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="function">sds <span class="title">sdscatprintf</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatfmt</span><span class="params">(sds s, <span class="keyword">char</span> <span class="keyword">const</span> *fmt, ...)</span></span>;                                        <span class="comment">// 将可变参数格式化输出添加到 sds 字符串中, 这里格式化输出为 sds 字符串</span></span><br><span class="line"><span class="function">sds <span class="title">sdstrim</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *cset)</span></span>;                                              <span class="comment">// 删除 sds 字符串首尾在 'cset' 中存在的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsrange</span><span class="params">(sds s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;                                          <span class="comment">//将字符串转换为一个较小(或相等)的, 仅包含由 'start' 到 'end' 索引指定的子串.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsupdatelen</span><span class="params">(sds s)</span></span>;                                                          <span class="comment">// 更新 sds 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span></span>;                                                              <span class="comment">// 清空 sds 字符串的内容</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdscmp</span><span class="params">(<span class="keyword">const</span> sds s1, <span class="keyword">const</span> sds s2)</span></span>;                                            <span class="comment">// 比较两个字符串</span></span><br><span class="line"><span class="function">sds *<span class="title">sdssplitlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, <span class="keyword">const</span> <span class="keyword">char</span> *sep, <span class="keyword">int</span> seplen, <span class="keyword">int</span> *count)</span></span>; <span class="comment">// 分割 's' 保存在 sds 数组中, 二进制安全, 不可以以分隔符结尾</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfreesplitres</span><span class="params">(sds *tokens, <span class="keyword">int</span> count)</span></span>;                                      <span class="comment">// 释放分割的结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstolower</span><span class="params">(sds s)</span></span>;                                                            <span class="comment">// 将 sds 字符串 's' 中的字母转换为小写字母</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstoupper</span><span class="params">(sds s)</span></span>;                                                            <span class="comment">// 将 sds 字符串 's' 中的字母转换为大写字母</span></span><br><span class="line"><span class="function">sds <span class="title">sdsfromlonglong</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> value)</span></span>;                                              <span class="comment">// long long 类型转换为 sds 类型</span></span><br><span class="line"><span class="function">sds <span class="title">sdscatrepr</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *p, <span class="keyword">size_t</span> len)</span></span>;                                  <span class="comment">// 将源字符串所有无法打印的字符转换为转义字符添加到 sds 字符串中, 转义后的字符串在 sds 字符串中被 '"' 包裹.</span></span><br><span class="line"><span class="function">sds *<span class="title">sdssplitargs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *line, <span class="keyword">int</span> *argc)</span></span>;                                    <span class="comment">// 将字符串按照 REPL 格式切分成一个 sds 参数数组</span></span><br><span class="line"><span class="function">sds <span class="title">sdsmapchars</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to, <span class="keyword">size_t</span> setlen)</span></span>;           <span class="comment">// 将 sds 字符串中 'from' 中的字符替换为 'to' 中对应位置的字符</span></span><br><span class="line"><span class="function">sds <span class="title">sdsjoin</span><span class="params">(<span class="keyword">char</span> **argv, <span class="keyword">int</span> argc, <span class="keyword">char</span> *sep)</span></span>;                                     <span class="comment">// 将参数以 sep 为间隔连接成一个 sds 字符串, 二进制不安全</span></span><br><span class="line"><span class="function">sds <span class="title">sdsjoinsds</span><span class="params">(sds *argv, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *sep, <span class="keyword">size_t</span> seplen)</span></span>;               <span class="comment">// 类似sdsjoin, 但是是将一个 sds 字符串数组组合成一个 sds 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 低等级函数作为 API 暴露给用户使用 */</span></span><br><span class="line"><span class="function">sds <span class="title">sdsMakeRoomFor</span><span class="params">(sds s, <span class="keyword">size_t</span> addlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsIncrLen</span><span class="params">(sds s, <span class="keyword">int</span> incr)</span></span>;</span><br><span class="line"><span class="function">sds <span class="title">sdsRemoveFreeSpace</span><span class="params">(sds s)</span></span>;</span><br><span class="line"><span class="keyword">size_t</span> sdsAllocSize(sds s);</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sdsAllocPtr</span><span class="params">(sds s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将 SDS 使用的分配器输出给调用 SDS 的程序使用.</span></span><br><span class="line"><span class="comment"> * 有时链接 SDS 的程序可能会设置不同的迭代器, 但是可能想要分配或释放 SDS 分别释放或分配的一些东西. */</span></span><br><span class="line"><span class="comment">// 封装 SDS 分配器给调用者使用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sds_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sds_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sds_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> REDIS_TEST</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdsTest</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><code>sdsalloc.h</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SDSLib 2.0, 一个 C 实现的 strings 库 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SDS 选择分配器.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用这个文件是为了在编译时可以改变 SDS 的分配器.</span></span><br><span class="line"><span class="comment"> * 只需要根据你需要使用的分配器定义宏.</span></span><br><span class="line"><span class="comment"> * 也需要根据需要 include(导入) 你用来替换的分配器的库</span></span><br><span class="line"><span class="comment"> * (使用默认分配器不需要). */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zmalloc.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s_malloc  zmalloc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s_realloc zrealloc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s_free    zfree</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文将介绍 &lt;code&gt;SDS&lt;/code&gt; 的头文件. &lt;code&gt;SDS&lt;/code&gt; 的头文件包括两个文件: &lt;code&gt;sds.h&lt;/code&gt; 和 &lt;code&gt;sdsalloc.h&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="源码" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Redis" scheme="http://chunqiublog.github.io/tags/Redis/"/>
    
      <category term="SDS" scheme="http://chunqiublog.github.io/tags/SDS/"/>
    
  </entry>
  
  <entry>
    <title>Redis 4.0源码解析</title>
    <link href="http://chunqiublog.github.io/2017-12-14-Redis-4-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>http://chunqiublog.github.io/2017-12-14-Redis-4-0源码解析.html</id>
    <published>2017-12-14T03:21:58.000Z</published>
    <updated>2017-12-14T18:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;关于Redis一直想学习源码但是人懒, 一直没有行动也就渐渐没有了想法. 最近工作用到了Redis, 开始学习Redis最基本的用法. 想要学习Redis源码的欲望有冒出来了, 同时由于在工作中一直感觉自己的能力不足, 需要给自己充充电. 于是决定开始阅读Redis源码.<br><a id="more"></a><br>&emsp;&emsp;以前一直没有阅读过真正大项目的源码, 真正开始阅读才发现Redis的源码对我来说真的是好庞大, 一个文件上千行代码, 利用工作之余阅读, 尽量做到认真阅读每行代码, 大于要花大半个月的时间, 算算时间可能阅读完Redis源码需要花费的时间要超过一年. 回顾以往经历, 对自己能否坚持下来很是担心. 正好这两天我也在看一个大神的博客, 想自己搞个博客, 写点东西. 所以搞个博客记录一下自己的学习. 一方面可以归纳总结自己所学到的东西, 有不对的地方也可以被其他人指正; 另一方面有人阅读我的文章也是对我的一种激励, 避免一个人独自学习因为无聊而放弃.<br>最开始在网上找到了一份关于Redis 2.8 的中文注释源码, 就开始阅读这份源码. 在阅读过程中查资料时发现了 Redis设计与实现 , 感觉这个本书写的挺不错, 而且也附带有一份关于Redis 3.0 的中文注释源码, 同时由于发现了一处Redis源码中的小问题在向Redis提交代码是发现最新的Redis已经到了4.0版本. 于是决定参考2.8和3.0的源码阅读Redis 4.0版本的源码. 由于对redis还没有一个整体的认识, 所以在阅读过程中可能存在一些错误的认识, 欢迎大家指正.</p><blockquote><p><strong>Redis 学习资源</strong></p><ol><li><a href="https://redis.io" target="_blank" rel="noopener">Redis 官网</a></li><li><a href="http://www.redis.cn" target="_blank" rel="noopener">Redis 中文官方网站</a></li><li><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Github 上 Redis 源码</a></li><li><a href="https://try.redis.io" target="_blank" rel="noopener">线上 Redis 示范环境</a></li><li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis 使用教程</a></li><li><a href="http://blog.huangz.me/diary/2014/how-to-read-redis-source-code.html" target="_blank" rel="noopener">如何阅读 Redis 源码?</a></li><li><a href="http://redisbook.com" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">Redis 3.0中文注释源码</a></li><li><a href="http://blog.csdn.net/androidlushangderen/article/details/39803337" target="_blank" rel="noopener">Redis 2.8源码解析</a></li><li><a href="https://github.com/linyiqun/Redis-Code" target="_blank" rel="noopener">Reids 2.8中文注释源码</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;关于Redis一直想学习源码但是人懒, 一直没有行动也就渐渐没有了想法. 最近工作用到了Redis, 开始学习Redis最基本的用法. 想要学习Redis源码的欲望有冒出来了, 同时由于在工作中一直感觉自己的能力不足, 需要给自己充充电. 于是决定开始阅读Redis源码.&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="源码" scheme="http://chunqiublog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Redis" scheme="http://chunqiublog.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
